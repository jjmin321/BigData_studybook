5+3
5-3
a = 23
b = a
b = &a
f = e
e = d
d = c
a = 10
a = 10
a = 10
a = 10
a = 10
a = 10
b := 10
b : 10
b <- 30
var c = 10
const c = 10
let c = 30
typeof(a)
typeof(b)
typeof(b)
console.log(a)
print(a)
print(typeof(a))
print(a,b,B)
print(a,b,B)
print(B)
print(b)
B <- 50 #소문자와 대문자는 다름
print(a,b,B)
typeof(B)
print(a+b)
print(a+b+B)
print(a,b,B)
print(a,b)
rm(a)
rm(b)
rm(B)
rm(d)
rm(d)
rm(a)
rm(a)
# 빅데이터 분석 1번째 수업 - 20200118(토)
# 변수(variable) - 값을 저장하는 공간
a = 10 #1번 방법
b <- 30 #2번 방법 - 최근 경향
B <- 50 #소문자와 대문자는 다름
rm(a)
rm(all()) #변수 1개 삭제하는 방법
class(x1)
class(x1)
x1 <- 10
class(x1)
typeof(x1)
x3 <- "10"
class(x3)
x8 <- factor(c("male", "female", "male", "female", "male"))
# 빅데이터 분석 1번째 수업 - 20200118(토)
# 변수(variable) - 값을 저장하는 공간
a = 10 #1번 방법
b <- 30 #2번 방법 - 최근 경향
B <- 50 #소문자와 대문자는 다름
rm(a) #변수 1개 삭제하는 방법
rm(list = ls()) #변수 모두 삭제하는 방법
#데이터 타입(type) : 자료형
# 1. 숫자 : 정수, 실수
# 2. 문자 : "". ''
# 3. 논리 : true,false
# 4. 범주(factor) : 범주형으로 다루는 데이터 ex) 남, 여 , 군필, 미필
# 5. 날짜
# 6. 날짜, 시간
x1 <- 10
class(x1)
typeof(x1)
x2 <- 10.5
class(x2)
x3 <- "10"
class(x3)
x8 <- factor(c("male", "female", "male", "female", "male"))
x9 <- as.Date("2020-12-25")
class(x9)
x6 <- as.POSIXct("2020-09-27 13:33:25")
class(x6)
rm(list = ls())
x2 <- 1:10
x2 + 5
x1 > 5
# Vertor(백터) : 동일한 데이터 타입의 값을 일렬로 나열한 데이터 구조(같은 타입)
x1 <- 10 # 단일 데이터
x2 <- 1:10
x1 + 5
x2 + 5
x1 > 5
x2 > 5
x2 + 5
x2 > 5
x2 <- 1:10
x2 + 5
x2 <- x2 + 5
x2 > 5
# c() : combaine, 여러 벡터 데이터를 연결하여 하나의 긴 벡터를 만드는 함수
x3 <-c(10,15,27,34,49)
class(x3)
typeof(x3)
x4 <- c(1:10)
x5 <- c("John", "Mark", "Peter")
class(x5)
x6 <- c("ABC", 10, 10.5)
x7 <- c(1,2,3, c(4,5), c(6,7,8))
#seq() : sequence, 값을 연속적으로 나타내는 함수
x8 <- seq(1,10, 3)
x9 <- c(1:10:3)
x9 <- c(1:10)
x9 <- seq(from=1, to=10, length.out=3)
# rep() : repeat, 값을 반복해서 나타내는 함수
x10 <- rep(1,10)
# rep() : repeat, 값을 반복해서 나타내는 함수
x10 <- rep(1,10)
x11 <- req("It's req()", 5)
x11 <- rep("It's rep()", 5)
x11 <- rep("It's rep()", 2)
x12 <- reqp(c("A","B","C"),3)
x12 <- rep(c("A","B","C"),3)
x13 <- rep(seq(1,4), times=3)
x14 <- rep(seq(1,4), each=3)
x15 <- rep(seq(1,4), length.out=10)
x16 <- req(seq(1,4), 3)
x16 <- rep(seq(1,4), 3)
# 논리 데이터
x19 <- c(TRUE, FALSE, TRUE, FALSE);
class(x19)
x20 <- c(3,3,1)
x21 <- c(1,2,3)
x20 > x21
# A고등학교의 3학년 3반의 학생의 키 측정값 7개
v1 <- c(180,168,172,155,190,175,185)
# A고등학교의 3학년 3반의 학생의 키 측정값 7개
v1 <- c(180,168,172,155,190,175,185)
avg(v1)
min(v1)
mean(v1)
max(v1)
v1[3]
v1[0]
v1[1]
v1[4]
v1[3:5]
v1[2:3,5]
v1[c(2,3,5)]
v1(c(1:2,4:))
v1(c(1:2,4:7))
v1[(c(1:2,4:7)]
v1[c(1:2,4:7)]
v1[c(1:2,4:)]
v1[c(1:2,4:7)]
v1[c(1:2,4:7)] ; v1[-3]
v1[-3]
v1[-3,5,7]
v1[-3,-5,-7]
v1[c(-3,-5,-7)]
v1[c(-2:4)]
v1[c(-2:-4)]
v1[-2:-4]
v1[-2:-4]
v2 <- v1[c(-3,-5)]
v2
v2 <- v1[c(-3,-5)]; v2
# 백터의 정렬(sort)
# 오름차순 정렬
sort(v1)
# 내림차순 정렬
sort(v1, reserve = true)
# 내림차순 정렬
sort(v1, reverse = true)
# 내림차순 정렬
sort.default(v1)
# 내림차순 정렬(Descending sort)
sort(v1,decreasing = false)
# 내림차순 정렬(Descending sort)
sort(v1,decreasing = true)
# 내림차순 정렬(Descending sort)
sort(v1,decreasing = FALSE)
# 내림차순 정렬(Descending sort)
sort(v1,decreasing = TRUE)
m1 <- matrix(x, nrow=2, ncol = 3); m1
# 2.Matrix(행렬) : 2차원 형태(직사각형)의 데이터 구조(같은 타입)
x <- 1:6
m1 <- matrix(x, nrow=2, ncol = 3); m1
m2 <- matrix(x, nrow=3, ncol=2); m1
m2 <- matrix(x, nrow=3, ncol=2); m2
m3 <- matrix(x,nrow=2,ncol=3 byrow=TRUE); m3
m3 <- matrix(x,nrow=2,ncol=3 byrow=TRUE); m3
m3 <- matrix(x,nrow=2,ncol=3 byrow=TRUE); m3
m3 <- matrix(x,nrow=2,ncol=3 byrow=TRUE); m3
m3 <- matrix(x,nrow=2,ncol=3 byrow=TRUE); m3
m3 <- matrix(x,nrow=2,ncol=3 byrow=TRUE); m3
m3 <- matrix(x,nrow=2,ncol=3 byrow=TRUE); m3
m3 <- matrix(x,nrow=2,ncol=3 byrow=TRUE)); m3
m3 <- matrix(x,nrow=2,ncol=3, byrow=TRUE); m3
dim(m1)
dim(m1)
dim(m2)
# 3. Array(배열) - 3차원 이상의 격자형 데이터 구조(같은 타입)
a1 <- array(x, c(2,2,3)); a1
# 3. Array(배열) - 3차원 이상의 격자형 데이터 구조(같은 타입)
a1 <- array(x, c(2,2,3)); a1 #행, 열, 면
# 4. List(리스트) - 1차원의 여러 가지 타입을 가지는 데이터 구조, 리스트의 원소가 다시 리스트가 될 수 있어서 대칭적인 구조를 가질 수가 있음
list1 <- list(c(1,2,3),c(john,mark,smith)); list
# 4. List(리스트) - 1차원의 여러 가지 타입을 가지는 데이터 구조, 리스트의 원소가 다시 리스트가 될 수 있어서 대칭적인 구조를 가질 수가 있음
list1 <- list(c(1,2,3),c(john,mark,smith)); list1
# 4. List(리스트) - 1차원의 여러 가지 타입을 가지는 데이터 구조, 리스트의 원소가 다시 리스트가 될 수 있어서 대칭적인 구조를 가질 수가 있음
list1 <- list(c(1,2,3),c("john","mark","smith")); list1
View(list1)
class(list1)
dim(list1)
class(list1)
load("~/Documents/R/work/.RData")
# 데이터 프레임을 생성하는 방법 1
# A클럽의 회원의 정보를 생성 - 10명
id <- 1:10
# 데이터 프레임을 생성하는 방법 1
# A클럽의 회원의 정보를 생성 - 10명
id <- 1:10
gender <- c("M", "F", "M", "F", "F", "M", "F", "M", "F", "F");
# 데이터 프레임을 생성하는 방법 1
# A클럽의 회원의 정보를 생성 - 10명
id <- 1:10;
gender <- c("M", "F", "M", "F", "F", "M", "F", "M", "F", "F");
area <- c("제주", "대구", "인천", "서울", "부산", "전주", "광주", "대구", "서울", "부산");
area <- c("제주", "대구", "인천", "서울", "부산", "전주", "광주", "대구", "서울", "부산");
length(age)
length.age
member
member <- data.frame(id, sex, area, age)
member
member <- data.frame(id, gender, area, age)
member
area <- c("제주", "대구", "인천", "서울", "부산", "전주", "광주", "대구", "서울", "부산")
age <- c(20, 35, 65, 45, 33, 32, 33, 71, 23, 22)
member <- data.frame(id, gender, area, age)
member
age <- c(20, 35, 65, 45, 33, 32, 33, 71, 23, 22, 21)
member <- data.frame(id, gender, area, age)
age <- c(20, 35, 65, 45, 33, 32, 33, 71, 23, 22, 20)
member <- data.frame(id, gender, area, age)
member
class(member)
dim(member)
# 데이터프레임의 정보를 확인
print(member)
# 데이터프레임의 정보를 확인
View(member)
head(member)
tail(member)
head(member,8)
summary(member)
# 데이터프레임에 각 변수의 정보를 확인
member$id
member$gender
member$area
member$age
mean(age)
# 문제 ) member의 정보에서 지역정보만 ma로 저장하시오.
ma <- member$area
", "포도", "바나나"),
price = c(1500, 3000, 15000, 4500, 2500),
volume = c(30, 25, 13, 27, 40))
# 데이터프레임을 생성하는 방법 2
# 과일가게에서 과일의 가격과 수량 정보를 생성
fruit_shop <- data.frame(fruit = c("사과", "딸기", "수박", "포도", "바나나"),
price = c(1500, 3000, 15000, 4500, 2500),
volume = c(30, 25, 13, 27, 40))
fruit_shop
View(fruit_shop)
# 통계 함수
sum(fruit_shop$volume) #과일의 갯수의 총합계
mean(fruit_shop$price)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2) # ggplot2 사용
installed.packages(ggplot2)
installed.packages("ggplot2")
installed.packages()
mpg <- as.data.frame(ggplot2::mpg)
View(mpg)
# 도움말 보기
help(mpg)
?mpg
tail(mpg, 5)
head(mpg, 5)
head(mpg == hyundai)
mpg$hwy
mtcars <- mtcars
mtcars <- mtcars
View(mtcars)
### 생성된 데이터프레임에 열(변수) 추가/삭제/수정
# B클럽 회원의 신장 정보를 생성하는 데이터프레임
df1 <- data.frame(name=c("kim", "Lee", "Park", "kang", "Han"),
dim(df1)
### 생성된 데이터프레임에 열(변수) 추가/삭제/수정
# B클럽 회원의 신장 정보를 생성하는 데이터프레임
df1 <- data.frame(name=c("kim", "Lee", "Park", "kang", "Han"),
age=c(33, 25, 41, 52, 29),
height=c(180, 178, 172, 176, 185), stringsAsFactors = FALSE)
### 생성된 데이터프레임에 열(변수) 추가/삭제/수정
# B클럽 회원의 신장 정보를 생성하는 데이터프레임
df1 <- data.frame(name=c("kim", "Lee", "Park", "kang", "Han"),
age=c(33, 25, 41, 52, 29),
height=c(180, 178, 172, 176, 185), stringsAsFactors = FALSE)
df1
View(df1)
dim(df1)
df1[3][1]
df1[3
df1[3]
df1[3]
df1[3][3]
df1(id=3)
df1[0][3]
df1[0,3]
df1(3)
df1[0,3]
df1[,3
df1[,3]
df1[,3]
df1[3,]
df1[4,2] # 4행 2열만 출력
View(df1)
df1[4,3]
df1[4,3] <- 173
df1[4,3]
df1[5, ] <- "pong", 30, 175
df1[5, ] <- ("pong", 30, 175)
df1[5, ] <- "pong, 30, 175)
df1[5, ] <- pong, 30, 175
df1[5, ]
df1[5, ] <- "pong", 30, 175
df1[5, ] <- "pong", 30, 175
df1[5, ] <- pong, 30, 175
df1[5, ]
df1[5, ] <- c("pong", 30, 175)
df1[5, ]
df1[6, ] <- c("choi", 45, 176)
View(df1)
df1[-3,]
df1[rm(-3),]
rm(df1[-3,])
df2 <- df1[-3, ]
class(mtcars)
dim(mtcars)
View(mt1)
# mpg를 cyl로 나눈 결과를 저장
mt1 <- mtcars$mpg/mtcars$cyl
View(mt1)
within(mtcars, mc <- mpg/cyl)
View(mtcars)
mtcars <- within(mtcars, mc <- mpg/cyl)
View(mtcars)
### 데이터 타입 읽기(불러오기)/쓰기(저장)
# 1. 엑셀(xls, xlsx) 파일 읽기/쓰기
# readx1 패키지 : 엑셀 패키지, 읽기만 가능
install.packages(readx1)
### 데이터 타입 읽기(불러오기)/쓰기(저장)
# 1. 엑셀(xls, xlsx) 파일 읽기/쓰기
# readx1 패키지 : 엑셀 패키지, 읽기만 가능
install.packages("readx1")
### 데이터 타입 읽기(불러오기)/쓰기(저장)
# 1. 엑셀(xls, xlsx) 파일 읽기/쓰기
# readx1 패키지 : 엑셀 패키지, 읽기만 가능
install.packages("readx1")
### 데이터 타입 읽기(불러오기)/쓰기(저장)
# 1. 엑셀(xls, xlsx) 파일 읽기/쓰기
# readx1 패키지 : 엑셀 패키지, 읽기만 가능
installed.packages("readx1")
### 데이터 타입 읽기(불러오기)/쓰기(저장)
# 1. 엑셀(xls, xlsx) 파일 읽기/쓰기
# readx1 패키지 : 엑셀 패키지, 읽기만 가능
install.packages("readxl")
library("readx1")
library("readxl")
df_exam1 <- read_excel("Users/jejeongmin/Documents/R/data1/excel_exam.xlsx")
df_exam1 <- read_excel("/Users/jejeongmin/Documents/R/data1/excel_exam.xlsx")
df_exam1 <- read_excel("/Users/jejeongmin/Documents/R/data1/excel_exam.xlsx")
df_exam1
View(df_exam1)
DIm(df_exam1)
dim(df_exam1)
df_exam2 <- read_excel("/Users/jejeongmin/documents/r/data1/excel_exam_novar.xlsx")
View(df_exam2)
df_exam3 <- read.excel("/users/jejeongmin/documents/r/data1/excel_exam_novar.xlsx", col_names = FALSE)
View(df_exam3)
df_exam3 <- read.excel("/users/jejeongmin/documents/r/data1/excel_exam_novar.xlsx", col_names = FALSE)
df_exam3 <- read.excel("/Users/jejeongmin/documents/r/data1/excel_exam_novar.xlsx", col_names = FALSE)
df_exam3 <- read_excel("/Users/jejeongmin/documents/r/data1/excel_exam_novar.xlsx", col_names = FALSE)
View(df_exam3)
# 1-2 xlsx 패키지 : 엑셀 파일 읽기/쓰기, 다양한 옵션을 활용
install.packages("xlsx")
library("xlsx")
View(df_exam5)
View(df_exam1)
df_exam1 <- within(df_exam1, c(tot, mean), c((math+english+science, (math+english+science)/3)))
df_exam1 <- within(df_exam1, c(tot, mean) <- c((math+english+science, (math+english+science)/3)))
df_exam1 <- within(df_exam1, c(tot, mean) <- c(math+english+science, (math+english+science)/3)
View(df_exam1)
df_exam1 <- within(df_exam1, c(tot, mean) <- c(math+english+science, (math+english+science)/3))
View(df_exam1)
df_exam1 <- within(df_exam1, tot <- math+english+science)
df_exam1 <- within(df_exam1, mean <- (math+english+science)/3)
View(df_exam1)
