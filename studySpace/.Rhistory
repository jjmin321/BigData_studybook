#데이터 결합 함수 - 다양한 결합 함수 사용
# 1. 세로 결합(조인)
a <- data.frame(A = c("a", "b", "c"),
B = c("t", "u", "v"),
C = c(1,2,3), stringsAsFactors = F)
b <- data.frame(A = c("a", "b", "c"),
B = c("t", "u", "w"),
C = c(1, 2, 4), stringsAsFactors = F)
# 1-1 . bind_rows() - 데이터 아래에 데이터2를 세로로 합침.
ab1 <- bind_rows(a, b)
View(ab1)
##########
# 데이터 결합(join)하는 방법 - dplyr 패키지 안에 함수들을 활용
# 1. 가로 결합 - left_join() 함수 : 가로 결합 시에 가장 많이 사용하는 함수
library(dplyr)
# 1-1 . bind_rows() - 데이터 아래에 데이터2를 세로로 합침.
ab1 <- bind_rows(a, b)
View(ab1)
### 6. filter()
mtcars <- filter(mtcars, class==3)
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
# %in# - 매칭 연산자
exam_ClassThree <- exam %>% filter(class == 3)
###############3# 데이터 가공
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
library(readxl)
library(dplyr)
###############3# 데이터 가공
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
# %in# - 매칭 연산자
exam_ClassThree <- exam %>% filter(class == 3)
###############3# 데이터 가공
exam <- read_excel("../../data1/excel_exam.xlsx")
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
# %in# - 매칭 연산자
exam_classThree <- filter(exam, class==3)
View(exam_classThree)
###############3# 데이터 가공
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
# %in# - 매칭 연산자
exam_classThree <- filter(exam, class==3)
View(exam_classThree)
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
# %in# - 매칭 연산자
exam <- filter(exam, class==3)
View(exam)
# select() 함수 - 구하고자 하는 열(변수) 추출
exam %>% select(math, science)
# select() 함수 - 구하고자 하는 열(변수) 추출
exam %>% select(math, science)
exam <- select(exam, math, science)
View(exam)
exam <- select(exam, math, science, english)
exam <- select(exam, math, science, eng)
###############3# 데이터 가공
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
exam <- select(exam, math, science, english)
View(exam)
View(exam)
View(exam)
View(exam)
exam <- arrange()
View(exam)
exam <- arrange(math)
exam <- arrange(exam, math)
View(exam)
View(exam)
exam <- arrange(exam, math, science)
View(exam)
exam <- arrange(exam, science)
View(exam)
exam <- arrange(exam, -science)
View(exam)
exam <- head(exam, 5)
View(exam)
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
exam <- summarise(exam)
exam <- summarise(exam, mean_exam = mean(exam))
### 4. mutate() - 파생변수를 생성하는 함수
library(dplyr)
exam <- summarise(exam, mean_exam = mean(exam))
View(exam)
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
exam <- read_excel("../../data1/excel_exam.xlsx")
library(readxl)
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
exam <- summarise(exam, mean_exam = mean(exam))
View(exam)
# 문제) mpg에서 차종별로 도시연비의 평균을 높은순으로 확인하시오.
mpg_class_desc <- mpg %>% group_by(class) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
mpg <- as.data.frame(ggplot2::mpg)
# 문제) mpg에서 차종별로 도시연비의 평균을 높은순으로 확인하시오.
mpg_class_desc <- mpg %>% group_by(class) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
View(mpg_class_desc)
View(mpg_class_desc)
View(mpg)
View(mpg)
mpg <- group_by(displ)
mpg <- group_by(mpg, displ)
View(mpg)
mpg <- group_by(mpg, displ)
View(mpg)
mpg <- group_by(mpg, displ)
View(mpg)
mpg <- group_by(mpg$displ)
View(mpg)
mpg <- group_by(displ)
mpg <- group_by(mpg, displ)
View(mpg)
View(mpg)
mpg <- group_by(mpg, year)
View(mpg)
View(mpg)
mpg <- group_by(mpg, manufacturer)
View(mpg)
mpg <- group_by(mpg, -manufacturer)
mpg <- group_by(mpg, desc(anufacturer))
mpg <- mpg %>%group_by(year)
View(mpg)
df <- data.frame(sex = c("M", "F", NA, "M", "F"),
score = c(5,4,3,4,NA), stringAsFactors = F)
# 결측치 데이터를 확인하는 함수
is.na(df)
# 결측치 데이터를 확인하는 함수
table(is.na(df))
### 6. sum(), mean(), max(), min(), median(), sd(), n(): 데이터 통계 함수
sum(fruit_shop$price) #총합계
### 4. data.frame() : 데이터 프레임을 만들어주는 함수
fruit_shop <- data.frame(fruit = c("사과", "딸기", "수박", "포도", "바나나"),
price = c(1500, 3000, 15000, 4500, 2500))
### 6. sum(), mean(), max(), min(), median(), sd(), n(): 데이터 통계 함수
sum(fruit_shop$price) #총합계
mean(fruit_shop$price) #평균
max(fruit_shop$price) #최댓값
min(fruit_shop$price) #최솟값
median(fruit_shop$price) #중앙값
sd(fruit_shop$price) #표준편차
n(fruit_shop$price) #빈도
n() #빈도
exam %>% group_by(class) %>%
summarise(mean_math = mean(math),
sum_math = sum(math),
max_math = max(math),
min_math = min(math),
n_math = n())
