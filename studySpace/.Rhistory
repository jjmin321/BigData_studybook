if (i % 2 != 0){
print(i)
}
}
# 3. 1부터 100까지의 정수 중에서 홀수를 출력
x <- 1 : 100
for (i in x){
if (i / 2 != 0){
print(i)
}
}
# 3. 1부터 100까지의 정수 중에서 홀수를 출력
for (i in 1:100){
if (i / 2 != 0){
print(i)
}else{
}
}
# 3. 1부터 100까지의 정수 중에서 홀수를 출력
for (i in 1:100){
if (i %% 2 != 0){
print(i)
}
}
print(i)
# 4. 1부터 100까지의 정수 중에서 3의 배수이면서 4의 배수인 수를 출력
for (i in 1:100){
if (i %% 3 == 0 && i %% 4 == 0){
print(i)
}
}
# 4. 1부터 100까지의 정수 중에서 3의 배수이면서 4의 배수인 수를 출력
for (i in 1:100){
if (i %% 3 == 0 & i %% 4 == 0){
print(i)
}
}
print(i)
# 5. 1부터 100까지의 정수중에서 5의 배수거나 7의 배수인 수를 출력
for (i in 1:100){
if (i %% 5 == 0 || i %% 7 == 0){
print(i)
}
}
# 6. 1부터 10까지의 정수중에서 7이 되었을 때 반복문을 탈출
for (i in 1:10){
if (i == 7){
break
}
}
# 6. 1부터 10까지의 정수중에서 7이 되었을 때 반복문을 탈출
for (i in 1:10){
if (i == 7){
print(i)
break
}
}
source('~/.active-rstudio-document', echo=TRUE)
# 7. 1부터 10까지의 정수중에서 5를 제외한 값을 출력
for(i in 1:10){
if (i == 5){
continue
}
print(i)
}
# 7. 1부터 10까지의 정수중에서 5를 제외한 값을 출력
for(i in 1:10){
if (i == 5){
pass
}
print(i)
}
# 7. 1부터 10까지의 정수중에서 5를 제외한 값을 출력
for(i in 1:10){
if (i == 5){
next
}
print(i)
}
### 2. 사용자 함수 정의 - 반복문을 활용
# 문제) 1부터 n까지를 출력하는 함수를 생성하고, 활용
fn_loop <- function(x){
for (i in 1:x){
print(i)
}
}
fn_loop(10)
library(readxl)
library(ggplot2)
library(dplyr)
midwest <- as.data.frame(ggplot2::midwest)
View(midwest)
midwest <- rename(midwest, total <- poptotal, asian <- popasian)
View(midwest)
View(midwest)
midwest <- rename(midwest, poptotal <- total, popasian <- asian)
View(midwest)
midwest <- rename(midwest, poptotal = total, popasian = asian)
midwest <- rename(midwest, total = poptotal, asian = popasian)
View(midwest)
# 2. total, asian 변수를 이용하여 '전체 인구 대비 아시아 인구의 백분율'을 나타내는 파생변수 ratio를 생성하시오.
midwest <- within(midwest, ratio <- total/asian)
View(midwest)
# 3. 아시아 인구 백분율 전체 평균을 구하는 파생변수 average를 만들고, 이 평균을 초과하면 'large', 그 외에는 'small'이라는 값을 대입하는 파생변수 group을 생성하시오.
midwest$average <- mean(midwest$ratio)
View(midwest)
# 3. 아시아 인구 백분율 전체 평균을 구하는 파생변수 average를 만들고, 이 평균을 초과하면 'large', 그 외에는 'small'이라는 값을 대입하는 파생변수 group을 생성하시오.
midwest$average <- mean(midwest$ratio)
View(midwest)
midwest$group <- ifelse(midwest$ratio > midwest$average, 'large', 'small')
View(midwest)
# 3. 아시아 인구 백분율 전체 평균을 구하는 파생변수 average를 만들고, 이 평균을 초과하면 'large', 그 외에는 'small'이라는 값을 대입하는 파생변수 group을 생성하시오.
midwest$average <- mean(midwest$ratio)
# 2. total, asian 변수를 이용하여 '전체 인구 대비 아시아 인구의 백분율'을 나타내는 파생변수 ratio를 생성하시오.
midwest <- within(midwest, ratio <- asian/total*100)
View(midwest)
# 3. 아시아 인구 백분율 전체 평균을 구하는 파생변수 average를 만들고, 이 평균을 초과하면 'large', 그 외에는 'small'이라는 값을 대입하는 파생변수 group을 생성하시오.
midwest$average <- mean(midwest$ratio)
View(midwest)
midwest$group <- ifelse(midwest$ratio > midwest$average, 'large', 'small')
View(midwest)
# 4. 'large'와 'small'에 해당하는 지역이 얼마나 되는지 빈도표와 빈도 막대 그래프를 그리시오.
table(midwest$group)
qplot(midwest$group)
# 데이터 가공
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
exam %>% filter(class == 3)
exam
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
exam %>% filter(class == 3)
exam %>% filter(math >= 70)
exam %>% filter(class != 1)
exam_ClassOneThreeFive <- exam %>% filter(class == 1 | class == 3 | class = 5)
exam_ClassOneThreeFive <- exam %>% filter(class == 1 | class == 3 | class == 5)
exam_ClassOneThreeFive2 <- exam %>% filter(class %in% c(1,3,5))
exam_GeniusAtMath <- exam %>% filter(math >= 60 & science >= 70)
exam_GeniusAtMathAndScience <- exam %>% filter(math >= 60 & science >= 70)
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
# %in# - 매칭 연산자
exam_ClassThree <- exam %>% filter(class == 3)
exam_GeniusAtMath <- exam %>% filter(math >= 70)
exam_ClassNotOne <- exam %>% filter(class != 1)
exam_ClassOneThreeFive <- exam %>% filter(class == 1 | class == 3 | class == 5)
exam_ClassOneThreeFive2 <- exam %>% filter(class %in% c(1,3,5))
exam_GeniusAtMathAndScience <- exam %>% filter(math >= 60 & science >= 70)
# 문제 1) 1반과 2반의 학생 정보를 확인할 수 있는 class12 라는 데이터프레임을 생성하시오.
class12 <- exam %>% filter(class == 1 | class == 2)
class12
# 문제 2) 수학, 영어, 과학 점수가 모두 60점 이상인 학생의 정보
classGenius <- exam %>% filter(math >= 60 & english >= 60 & science >= 60)
classGenius
# 문제1) 자동차 배기량(displ)에 따라 고속도로 연비가 다른지 확인하고자 할 때, 배기량이 4이하인 자동차와 배기량이 5이상인 자동차 중에서 어떤 자동차의 고속도로 연비(hwy)가 평균적으로 더 높은지 확인하시오.
View(mpg)
# 문제1) 자동차 배기량(displ)에 따라 고속도로 연비가 다른지 확인하고자 할 때, 배기량이 4이하인 자동차와 배기량이 5이상인 자동차 중에서 어떤 자동차의 고속도로 연비(hwy)가 평균적으로 더 높은지 확인하시오.
exam_lowDispl <- mpg %>% filter(displ <= 4)
exam_lowDispl
exam_highDispl <- mpg %>% filter(displ >= 5)
exam_highDispl
View(exam_lowDispl)
# 문제1) 자동차 배기량(displ)에 따라 고속도로 연비가 다른지 확인하고자 할 때, 배기량이 4이하인 자동차와 배기량이 5이상인 자동차 중에서 어떤 자동차의 고속도로 연비(hwy)가 평균적으로 더 높은지 확인하시오.
exam_lowDispl <- mpg %>% filter(displ <= 4)
View(exam_lowDispl)
exam_highDispl <- mpg %>% filter(displ >= 5)
exam_highDispl
View(exam_highDispl)
# 문제1) 자동차 배기량(displ)에 따라 고속도로 연비가 다른지 확인하고자 할 때, 배기량이 4이하인 자동차와 배기량이 5이상인 자동차 중에서 어떤 자동차의 고속도로 연비(hwy)가 평균적으로 더 높은지 확인하시오.
exam_lowDispl <- mpg %>% filter(displ <= 4)
mpg <- as.data.frame(ggplot2::mpg)
# 문제1) 자동차 배기량(displ)에 따라 고속도로 연비가 다른지 확인하고자 할 때, 배기량이 4이하인 자동차와 배기량이 5이상인 자동차 중에서 어떤 자동차의 고속도로 연비(hwy)가 평균적으로 더 높은지 확인하시오.
exam_lowDispl <- mpg %>% filter(displ <= 4)
View(exam_lowDispl)
exam_highDispl <- mpg %>% filter(displ >= 5)
View(exam_highDispl)
# 문제1) 자동차 배기량(displ)에 따라 고속도로 연비가 다른지 확인하고자 할 때, 배기량이 4이하인 자동차와 배기량이 5이상인 자동차 중에서 어떤 자동차의 고속도로 연비(hwy)가 평균적으로 더 높은지 확인하시오.
exam_lowDispl <- mpg %>% filter(displ <= 4)
View(exam_lowDispl)
View(exam_highDispl)
# 문제2) 자동차 제조회사에 따라 도시연비가 다른지 확인하고자 할 때, "audi"와 "toyota"중에서 어느 자동차 제조회사의 도시연비가 평균적으로 더 높은지 확인하시오.
exam_audi <- mpg %>% filter(manufacturer == 'audi')
View(exam_audi)
exam_toyota <- mpg %>% filter(manufacturer = 'toyota')
exam_toyota <- mpg %>% filter(manufacturer == 'toyota')
View(exam_toyota)
View(exam_audi)
View(exam_audi)
mean(exam_audi$cty)
if(mean(exam_audi$cty) > mean(exam_toyota$cty)){
print("아우디의 도시연비가 더 높다")
}else{
print("토요타의 도시연비가 더 높다")
}
if(mean(exam_lowDispl$hwy) > mean(exam_highDispl$hwy)){
print("배기량이 4이하인 자동차의 고속도로 연비가 더 높다")
}else{
print("배기량이 5이상인 자동차의 고속도로 연비가 더 높다")
}
# 문제3) "chevrolet", "ford", "honda" 3개 제조회사의 자동차의 고속도로 연비의 평균을 확인하고자 할 때 , 이 회사의 데이터를 추출하여 저장한 후 , 고속도로연비의 전체 평균을 구하시오.
exam_chevrolet <- mpg %>% filter(manufacturer == 'chevrolet')
View(exam_chevrolet)
exam_ford <- mpg %>% filter(manufacturer == 'ford')
View(exam_ford)
exam_honda <- mpg %>% filter(manufacturer == 'honda')
View(exam_honda)
exam_averageHwy <- mean(exam_chevrolet$hwy, exam_ford$hwy, exam_honda$hwy)
exam_averageHwy <- mean(mean(exam_chevrolet$hwy), mean(exam_ford$hwy), mean(exam_honda$hwy))
View(exam_averageHwy)
print(exam_averageHwy)
View(exam_lowDispl)
if(mean(exam_lowDispl$hwy) > mean(exam_highDispl$hwy)){
print("배기량이 4이하인 자동차의 고속도로 연비가 더 높다")
}else{
print("배기량이 5이상인 자동차의 고속도로 연비가 더 높다")
}
# select() 함수 - 구하고자 하는 열(변수) 추출
exam %>% select(math, science)
exam %>% select(class, english, science)
exam %>% select(!id, !english)
exam %>% select(-id, -english)
exam %>%  select(-english),filter(class == 1 | class ==2)
exam %>%  select(-english) %>% filter(class == 1 | class ==2)
exam %>% filter(class %in% c(1,2,3)) %>% select(filter(math >= 60 & science >= 60))
exam %>% filter(class %in% c(1,2,3)) %>% select(math >= 60 & science >= 60)
# select() 함수 - 구하고자 하는 열(변수) 추출
exam %>% select(math, science)
exam %>% select(class, english, science)
exam %>% select(-id, -english)
exam %>%  select(-english) %>% filter(class == 1 | class ==2)
exam %>% filter(class %in% c(1,2,3)) %>% select(math >= 60 & science >= 60)
rlang:last_error()
last_error()
rlang::last_error()
exam %>% filter(class %in% c(1,2,3) & math >= 60 & science >= 60) %>% select(class, math, science)
### arrange() 함수 - 행을 정렬하는 함수(오름차순, 내림차순)
exam %>% arrange(english)
### arrange() 함수 - 행을 정렬하는 함수(오름차순, 내림차순)
exam %>% arrange(desc(english))
### arrange() 함수 - 행을 정렬하는 함수(오름차순, 내림차순)
exam %>% arrange(desc(english)) %>% head(5)
%>% head(5)
### arrange() 함수 - 행을 정렬하는 함수(오름차순, 내림차순)
exam %>% arrange(desc(english))
### arrange() 함수 - 행을 정렬하는 함수(오름차순, 내림차순)
exam %>% arrange(desc(english)) %>%
head(5)
# 문제) 3반이 아니며 수학,과학 점수가 60점이상인 학생 중 영어 점수를 제외하고, 수학점수를 기준으로 내림차순 정렬하고, 수학점수가 같다면 과학점수를 기준으로 내림차순 정렬하라.
exam %>% filter(class != 3 & math >= 60 & science >= 60) %>%
select(-english) %>%
arrange(math) %>%
arrange(science)
# 문제) 3반이 아니며 수학,과학 점수가 60점이상인 학생 중 영어 점수를 제외하고, 수학점수를 기준으로 내림차순 정렬하고, 수학점수가 같다면 과학점수를 기준으로 내림차순 정렬하라.
exam %>% filter(class != 3 & math >= 60 & science >= 60) %>%
select(-english) %>%
arrange(science) %>%
arrange(math)
# 문제) 3반이 아니며 수학,과학 점수가 60점이상인 학생 중 영어 점수를 제외하고, 수학점수를 기준으로 내림차순 정렬하고, 수학점수가 같다면 과학점수를 기준으로 내림차순 정렬하라.
exam %>% filter(class != 3 & math >= 60 & science >= 60) %>%
select(-english) %>%
arrange(math, science)
# 문제) 3반이 아니며 수학,과학 점수가 60점이상인 학생 중 영어 점수를 제외하고, 수학점수를 기준으로 내림차순 정렬하고, 수학점수가 같다면 과학점수를 기준으로 내림차순 정렬하라.
exam %>% filter(class != 3 & math >= 60 & science >= 60) %>%
select(-english) %>%
arrange(-math, -science)
library(readx1)
library(ggplot2)
library(dplyr)
mpg <- as.data.frame(ggplot2::mpg)
midwest <- as.data.frame(ggplot2::midwest)
### dplyr 패키지의 filter(), select(), arrange() 함수를 사용하는 문제
# 문제1) 자동차종류(class), 도시연비(cty) 변수를 추출하여 새로운 데이터프레임 mpg_class_cty를 만드시오.
View(mpg)
### dplyr 패키지의 filter(), select(), arrange() 함수를 사용하는 문제
# 문제1) 자동차종류(class), 도시연비(cty) 변수를 추출하여 새로운 데이터프레임 mpg_class_cty를 만드시오.
mpg_class_cty <- mpg %>% select(class, cty)
View(mpg_class_cty)
# 문제2) "audi"에서 생산한 자동차 중에서 어떤 자동차 모델의 고속도로연비가 높은지 1~5위에 해당하는 자동차의 데이터를 출력하시오.
View(mpg)
mpg_audi <- mpg %>% filter(manufacturer = audi)
mpg_audi <- mpg %>% filter(manufacturer == audi)
View(mpg_audi)
mpg_audi <- mpg %>% filter(manufacturer == audi)
mpg_audi <- mpg %>% filter(manufacturer == 'audi')
mpg_audi <- mpg %>% filter(manufacturer == 'audi')
View(mpg_audi)
View(mpg_audi)
mpg_audi <- mpg %>% filter(manufacturer == 'audi') %>% arrange(desc(hwy)) %>%
head(5)
View(mpg_audi)
# 문제3) 자동차종류(class)가 "suv"인 자동차와 "compact"인 자동차 중에서 어떤 자동차의 연비의 평균이 더 높은지 확인하시오.
View(mpg)
mpg_classIsSuv <- mpg %>% filter(class == 'suv')
View(mpg_classIsSuv)
mpg_classIsCompact <- mpg %>% filter(class == 'compact')
# 문제3) 자동차종류(class)가 "suv"인 자동차와 "compact"인 자동차 중에서 어떤 자동차의 연비의 평균이 더 높은지 확인하시오.
View(mpg)
# 문제3) 자동차종류(class)가 "suv"인 자동차와 "compact"인 자동차 중에서 어떤 자동차의 연비의 평균이 더 높은지 확인하시오.
View(mpg)
mpg_classIsSuv <- mpg %>% filter(class == 'suv')
mpg_classIsCompact <- mpg %>% filter(class == 'compact')
if(mean(mpg_classIsSuv$cty) > mean(mpg_classIsCompact$cty)){
print("suv인 자동차가 연비의 평균이 더 높다")
}else{
print("compact인 자동차가 연비의 평균이 더 높다")
}
exam <- read_excel("../../data1/excel_exam.xlsx")
library(readxl)
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
exam <- exam %>% mutate(tot = math + english + science)
exam <- exam %>% mutate(tot = math + english + science, avg = tot / 3)
View(exam)
exam <- exam %>% mutate(test <- ifelse(avg >= 60, pass, fail))
exam <- exam %>% mutate(test <- ifelse(avg >= 60, 'pass', 'fail'))
View(exam)
exam <- exam %>% mutate(test = ifelse(avg >= 60, 'pass', 'fail'))
View(exam)
exam <- exam %>% mutate(test = ifelse(avg >= 60, 'pass', 'fail'))
View(exam)
exam <- exam %>% mutate(tot = math + english + science, avg = tot / 3)
View(exam)
exam <- exam %>% mutate(test = ifelse(avg >= 60, 'pass', 'fail'))
View(exam)
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
exam <- exam %>% mutate(tot = math + english + science, avg = tot / 3)
View(exam)
exam <- exam %>% mutate(test = ifelse(avg >= 60, 'pass', 'fail'))
View(exam)
### dplyr패키지의 filter(), select(), arrange(), mutate()함수를 활용하는 문제
# 문제 ) mpg에서 도시연비(cty)와 고속도로연비(hwy)의 복합연비를 tot라는 파생변수로 생성하고 이 복합연비가 가장 높은 자동차의 데이터를 가장 높은 5개의 자동차 데이터를 출력하시오.
mpg <- mpg %>% mutate(tot = cty + hwy)
View(mpg)
mpg_highTot <- mpg %>% arrange(desc(tot)) %>%
head(5)
View(mpg_highTot)
# 문제) mpg에서 차종별로 도시연비의 평균을 높은순으로 확인하시오.
View(mpg)
# 문제) mpg에서 차종별로 도시연비의 평균을 높은순으로 확인하시오.
mpg_class)desc <- mpg %>% group_by(class) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
# 문제) mpg에서 차종별로 도시연비의 평균을 높은순으로 확인하시오.
mpg_class_desc <- mpg %>% group_by(class) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
View(mpg_class_desc)
# 문제) exam에서 반별로 수학점수의 평균이 높은순으로
View(exam)
exam_highMath <- exam %>% group_by(class) %>%
summarise(mean_math = mean(math)) %>%
arrange(desc(mean_math))
View(exam_highMath)
# 문제) exam에서 반별로 수학점수의 평균이 높은순으로 확인하시오.
View(exam)
View(exam %>% group_by(class))
View(exam %>% group_by(desc(class)))
View(exam %>% order_by(class))
View(exam %>% order_by(class))
View(exam %>% group_by(class))
View(exam %>% summarise(mean_math = mean(math)))
View(exam %>% group_by(class) %>%  summarise(mean_math = mean(math)))
exam %>% group_by(class) %>%
summarise(mean_math = mean(math),
sum_math = sum(math),
max_math = max(math),
min_math = min(math),
n_math = n())
##### 확인학습 - dplyr패키지를 사용하여 데이터의 전처리(정제)
# 문제1) 회사별로 그룹을 나눈 후, 다시 구동방식별로 나누어서 도시연비의 평균을 확인하시오
View(mpg)
mpg %>% group_by(manufacturer) %>%
group_by(drv) %>%
summarise(mean_cty = mean(cty))
View(mpg)
mpg_cty_avg <- mpg %>% group_by(manufacturer) %>%
group_by(drv) %>%
summarise(mean_cty = mean(cty))
View(mpg_cty_avg)
mpg_cty_avg <- mpg %>% group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty))
View(mpg_cty_avg)
# 문제2) 회사별로 그룹을 나눈 후, 'suv'의 데이터를 추출하고, 도시연비와 고속도로연비의 복합연비 파생변수를 생성한 후 복합연비의 평균이 높은 순으로 5건의 정보를 확인하시오.
View(mpg)
# 문제2) 회사별로 그룹을 나눈 후, 'suv'의 데이터를 추출하고, 도시연비와 고속도로연비의 복합연비 파생변수를 생성한 후 복합연비의 평균이 높은 순으로 5건의 정보를 확인하시오.
View(mpg)
mpg_tot_avg <- mpg %>% group_by(manufacturer) %>% select(class == suv)
mpg_tot_avg <- mpg %>% group_by(manufacturer) %>% select(class == 'suv')
# 문제2) 회사별로 그룹을 나눈 후, 'suv'의 데이터를 추출하고, 도시연비와 고속도로연비의 복합연비 파생변수를 생성한 후 복합연비의 평균이 높은 순으로 5건의 정보를 확인하시오.
View(mpg)
mpg_tot_avg <- mpg %>% group_by(manufacturer) %>% filter(class == 'suv') %>%
summarise(mean_tot = mean(tot)) %>%
arrange(desc(mean_tot)) %>%
head(5)
# 문제2) 회사별로 그룹을 나눈 후, 'suv'의 데이터를 추출하고, 도시연비와 고속도로연비의 복합연비 파생변수를 생성한 후 복합연비의 평균이 높은 순으로 5건의 정보를 확인하시오.
mpg_tot_avg <- mpg %>% group_by(manufacturer) %>% filter(class == 'suv') %>%
summarise(mean_tot = mean(tot)) %>%
arrange(desc(mean_tot)) %>%
head(5)
View(mpg_tot_avg)
# 문제3) 차종별로 도시연비의 평균을 높은순으로 확인하시오.
View(mpg)
# 문제3) 차종별로 도시연비의 평균을 높은순으로 확인하시오.
View(mpg)
mpg_high_cty <- mpg %>% group_by(model)
View(mpg_high_cty)
mpg_high_cty <- mpg %>% group_by(model) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
View(mpg_high_cty)
# 문제4) 고속도로연비가 가장 높은 회사 3곳의 정보를 확인하시오.
View(mpg)
# 문제4) 고속도로연비가 가장 높은 회사 3곳의 정보를 확인하시오.
View(mpg)
mpg_high_hwy_manufacturer <- mpg %>% group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy)) %>%
head(3)
View(mpg_high_hwy_manufacturer)
# 문제5) 회사별로 "compact" 차종의 수를 내림차순으로 정렬하여 확인하시오.
View(mpg)
# 문제5) 회사별로 "compact" 차종의 수를 내림차순으로 정렬하여 확인하시오.
View(mpg)
mpg_how_many_compact <- mpg %>% group_by(manufacturer) %>%
summarise(sum_compact = sum(class == 'compact')) %>%
arrange(sum_compact)
View(mpg_how_many_compact)
mpg_how_many_compact <- mpg %>% group_by(manufacturer) %>%
summarise(sum_compact = sum(class == 'compact')) %>%
arrange(sum_compact)
View(mpg_how_many_compact)
mpg_how_many_compact <- mpg %>% group_by(manufacturer) %>%
summarise(sum_compact = sum(class == 'compact')) %>%
arrange(sum_compact)
View(mpg_how_many_compact)
mpg_how_many_compact <- mpg %>% group_by(manufacturer) %>%
summarise(sum_compact = sum(class == 'compact')) %>%
arrange(desc(sum_compact))
View(mpg_how_many_compact)
View(mpg_how_many_compact)
df <- data.frame(sex = c("M", "F", NA, "M", "F",),
score = c(5,4,3,4,NA), stringAsFactors = F)
df <- data.frame(sex = c("M", "F", NA, "M", "F"),
score = c(5,4,3,4,NA), stringAsFactors = F)
mean(df$score)
# 결측치 데이터를 확인하는 함수
is.na(df)
# 결측치 데이터를 확인하는 함수
is.na(df)
is.na(df$sex)
is.na(df$score)
# 결측치 데이터를 확인하는 함수
is.n(df)
# 결측치 데이터를 확인하는 함수
is.table(df)
# 결측치 데이터를 확인하는 함수
table(is.na(df))
table(is.na(df$sex))
table(is.na(df$score))
# 1-2. 결측치 데이터가 여러 개의 변수에 있을 때 행을 제거
df_2 <- df %>% filter(!is.na(sex) !is.na(score))
df_2
# 1-2. 결측치 데이터가 여러 개의 변수에 있을 때 행을 제거
df_2 <- df %>% filter(!is.na(sex) !is.na(score))
# 1-2. 결측치 데이터가 여러 개의 변수에 있을 때 행을 제거
df_2 <- df %>% filter(!is.na(sex) & !is.na(score))
df_2
# 1-3. 데이터의 모든 변수에 대해서 결측치가 있는 행을 제거
df_3 <- na.omit(df)
df_3
# 2-2. 결측치의 값을 활용하는 방법 - 결측치를 평균 값으로 대체한다.
mean(df$score, na.rm = T)
# NA값을 나머지 값의 평균값인 4로 대체하는 방법
df_copy <- df
df_copy[5, "score"] <- 4
df_copy
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
View(exam)
mean(exam$math)
# 2-2 연습
exam <- read_excel("../../data1/excel_exam.xlsx")
# exam의 3, 8, 15번 학생의 'math'점수를 NA데이터로 변경
exam[c(3,8,15), "math"] <- NA
mean(exam$math)
mean(exam$math, na.rm = T)
# math의 NA값을 평균값인 55점으로 대체하는 방법
exam$math <- ifelse(is.na(exam$math), 55, exam$math)
# 1단계 - 이상치 판별
# 기준 - sex : 남자 = 1, 여자 = 2, 3은 이상치, score : 0 ~ 5 사이의 값, 6은 이상치
outlier <- data.frame(sex = c(1, 2, 3, 2, 1),
score = c(5, 4, 3, 4, 2, 6), stringsAsFactors = F)
# 1단계 - 이상치 판별
# 기준 - sex : 남자 = 1, 여자 = 2, 3은 이상치, score : 0 ~ 5 사이의 값, 6은 이상치
outlier <- data.frame(sex = c(1, 2, 1, 3, 2, 1),
score = c(5, 4, 3, 4, 2, 6), stringsAsFactors = F)
outlier
mean(outlier$score) # 4, 잘못된 평균 -> 이상치 값인 6이 포함되어 있기 때문
table(outlier$sex)
# 빈도를 통해 이상치 데이터를 판별
table(outlier$sex)
table(outlier$score)
# 2단계 - 이상치를 결측치로 변경
outlier$sex <- ifelse(outlier == 1 | outlier == 2, outlier$sex, NA)
View(outlier)
View(outlier)
View(outlier)
outlier$score <- ifelse(outlier$score >= 0 & outlier$score <= 5, outlier$score, NA)
View(outlier)
