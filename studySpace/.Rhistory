#데이터 결합 함수 - 다양한 결합 함수 사용
# 1. 세로 결합(조인)
a <- data.frame(A = c("a", "b", "c"),
B = c("t", "u", "v"),
C = c(1,2,3), stringsAsFactors = F)
b <- data.frame(A = c("a", "b", "c"),
B = c("t", "u", "w"),
C = c(1, 2, 4), stringsAsFactors = F)
# 1-1 . bind_rows() - 데이터 아래에 데이터2를 세로로 합침.
ab1 <- bind_rows(a, b)
View(ab1)
##########
# 데이터 결합(join)하는 방법 - dplyr 패키지 안에 함수들을 활용
# 1. 가로 결합 - left_join() 함수 : 가로 결합 시에 가장 많이 사용하는 함수
library(dplyr)
# 1-1 . bind_rows() - 데이터 아래에 데이터2를 세로로 합침.
ab1 <- bind_rows(a, b)
View(ab1)
### 6. filter()
mtcars <- filter(mtcars, class==3)
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
# %in# - 매칭 연산자
exam_ClassThree <- exam %>% filter(class == 3)
###############3# 데이터 가공
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
library(readxl)
library(dplyr)
###############3# 데이터 가공
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
# %in# - 매칭 연산자
exam_ClassThree <- exam %>% filter(class == 3)
###############3# 데이터 가공
exam <- read_excel("../../data1/excel_exam.xlsx")
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
# %in# - 매칭 연산자
exam_classThree <- filter(exam, class==3)
View(exam_classThree)
###############3# 데이터 가공
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
# %in# - 매칭 연산자
exam_classThree <- filter(exam, class==3)
View(exam_classThree)
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
# %in# - 매칭 연산자
exam <- filter(exam, class==3)
View(exam)
# select() 함수 - 구하고자 하는 열(변수) 추출
exam %>% select(math, science)
# select() 함수 - 구하고자 하는 열(변수) 추출
exam %>% select(math, science)
exam <- select(exam, math, science)
View(exam)
exam <- select(exam, math, science, english)
exam <- select(exam, math, science, eng)
###############3# 데이터 가공
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
exam <- select(exam, math, science, english)
View(exam)
View(exam)
View(exam)
View(exam)
exam <- arrange()
View(exam)
exam <- arrange(math)
exam <- arrange(exam, math)
View(exam)
View(exam)
exam <- arrange(exam, math, science)
View(exam)
exam <- arrange(exam, science)
View(exam)
exam <- arrange(exam, -science)
View(exam)
exam <- head(exam, 5)
View(exam)
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
exam <- summarise(exam)
exam <- summarise(exam, mean_exam = mean(exam))
### 4. mutate() - 파생변수를 생성하는 함수
library(dplyr)
exam <- summarise(exam, mean_exam = mean(exam))
View(exam)
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
exam <- read_excel("../../data1/excel_exam.xlsx")
library(readxl)
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
exam <- summarise(exam, mean_exam = mean(exam))
View(exam)
# 문제) mpg에서 차종별로 도시연비의 평균을 높은순으로 확인하시오.
mpg_class_desc <- mpg %>% group_by(class) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
mpg <- as.data.frame(ggplot2::mpg)
# 문제) mpg에서 차종별로 도시연비의 평균을 높은순으로 확인하시오.
mpg_class_desc <- mpg %>% group_by(class) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
View(mpg_class_desc)
View(mpg_class_desc)
View(mpg)
View(mpg)
mpg <- group_by(displ)
mpg <- group_by(mpg, displ)
View(mpg)
mpg <- group_by(mpg, displ)
View(mpg)
mpg <- group_by(mpg, displ)
View(mpg)
mpg <- group_by(mpg$displ)
View(mpg)
mpg <- group_by(displ)
mpg <- group_by(mpg, displ)
View(mpg)
View(mpg)
mpg <- group_by(mpg, year)
View(mpg)
View(mpg)
mpg <- group_by(mpg, manufacturer)
View(mpg)
mpg <- group_by(mpg, -manufacturer)
mpg <- group_by(mpg, desc(anufacturer))
mpg <- mpg %>%group_by(year)
View(mpg)
df <- data.frame(sex = c("M", "F", NA, "M", "F"),
score = c(5,4,3,4,NA), stringAsFactors = F)
# 결측치 데이터를 확인하는 함수
is.na(df)
# 결측치 데이터를 확인하는 함수
table(is.na(df))
### 6. sum(), mean(), max(), min(), median(), sd(), n(): 데이터 통계 함수
sum(fruit_shop$price) #총합계
### 4. data.frame() : 데이터 프레임을 만들어주는 함수
fruit_shop <- data.frame(fruit = c("사과", "딸기", "수박", "포도", "바나나"),
price = c(1500, 3000, 15000, 4500, 2500))
### 6. sum(), mean(), max(), min(), median(), sd(), n(): 데이터 통계 함수
sum(fruit_shop$price) #총합계
mean(fruit_shop$price) #평균
max(fruit_shop$price) #최댓값
min(fruit_shop$price) #최솟값
median(fruit_shop$price) #중앙값
sd(fruit_shop$price) #표준편차
n(fruit_shop$price) #빈도
n() #빈도
exam %>% group_by(class) %>%
summarise(mean_math = mean(math),
sum_math = sum(math),
max_math = max(math),
min_math = min(math),
n_math = n())
mpg <- as.data.frame(ggplot2::mpg)
### 1. 산점도 - x축, y축에 점으로 데이터를 표현, 변수와 변수와의 관계를 나타낼 때 사용
# 배기량(displ)별 고속도로 연비를 산점도로 표현하시오.
ggplot(data=mpg, aes(x = displ, y = hwy)) + # 데이터, 축
geom_point() + # 그래프의 종류
xlim(3, 6) + # x축의 범위
ylim(10, 30) # y축의 범위
library(ggplot2)
mpg <- as.data.frame(ggplot2::mpg)
### 1. 산점도 - x축, y축에 점으로 데이터를 표현, 변수와 변수와의 관계를 나타낼 때 사용
# 배기량(displ)별 고속도로 연비를 산점도로 표현하시오.
ggplot(data=mpg, aes(x = displ, y = hwy)) + # 데이터, 축
geom_point() + # 그래프의 종류
xlim(3, 6) + # x축의 범위
ylim(10, 30) # y축의 범위
# 이상치 판별
boxplot(mpg$hwy)$stats
#정렬 x
ggplot(data=mpg_drv_hwy, aes(x=drv, y=mean_hwy)) + geom_col()
mpg_drv_hwy <- mpg %>% filter(!is.na(hwy)) %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy))
library(dplyr)
mpg_drv_hwy <- mpg %>% filter(!is.na(hwy)) %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy))
#정렬 x
ggplot(data=mpg_drv_hwy, aes(x=drv, y=mean_hwy)) + geom_col()
#정렬 o
ggplot(data=mpg_drv_hwy, aes(x=reorder(drv, -mean_hwy), y=mean_hwy)) + geom_col()
### 3. 막대 그래프 - 빈도를 나타내는 그래프
# 예) 구동방식에 따른 자동차의 수를 막대 그래프로 표현
ggplot(data = mpg, aes(x=drv)) + geom_bar()
#정렬 o
ggplot(data=mpg_drv_hwy, aes(x=reorder(drv, -mean_hwy), y=mean_hwy)) + geom_col()
### 3. 막대 그래프 - 빈도를 나타내는 그래프
# 예) 구동방식에 따른 자동차의 수를 막대 그래프로 표현
ggplot(data = mpg, aes(x=drv)) + geom_bar()
library(ggplot2)
library(dplyr)
### 4. 선그래프 - 시간에 따라 변화하는 데이터를 표현할 때 주로 사용, 시계열 그래프
# ex) 날씨, 주식, 환율, 부동산 가격 ....
# 1967 ~ 2015 년 까지의 소비율, 저축율, 실업율 등에 관한 정보를 담고 있는 데이터셋
eco <- economics
# 시간에 따라 실업자 수와 증감 추이를 선그래프로 표현
ggplot(data=eco, aes(x=date, y=unemploy)) + geom_line(size=1, color="cyan")
# 시간에 따라 개인별 저축률의 증감 추이를 선그래프로 표현
View(eco)
mpg <- as.data.frame(ggplot2::mpg)
# 예) 구동방식별 고속도로연비를 상자그림으로 표현
ggplot(data =mpg, aes(x=drv, y=hwy)) + geom_boxplot()
# 예) 구동방식별 고속도로연비를 상자그림으로 표현
ggplot(data =mpg, aes(x=drv, y=hwy)) + geom_line()
# 예) 구동방식별 고속도로연비를 상자그림으로 표현
ggplot(data =mpg, aes(x=drv, y=hwy)) + geom_point()
# 예) 구동방식별 고속도로연비를 상자그림으로 표현
ggplot(data =mpg, aes(x=drv, y=hwy)) + geom_boxplot()
##########
#### 응용 그래프
mtcars <- mtcars
library(ggplot2)
library(dplyr)
# 1. 누적 막대 그래프
# 실린더 종류별 빈도를 파악하여, 기어를 누적 막대 그래프로 표현
ggplot(data=mtcars, aes(x=cyl)) + geom_bar() # 실린더별 빈도를 표현
# 2. 선버스트 그래프
ggplot(data=mtcars, aes(x=cyl)) + geom_bar(aes(fill=factor(gear))) + coord_polar()
# 3. 원형 그래프
ggplot(data=mtcars, aes(x=cyl)) + geom_bar(aes(fill=factor(gear))) + coord_polar(theta="y")
# 4. 히스토그램 - 도수분포를 기둥 모양의 그래프로 표현
# 온도의 변화를 도수 분포로 표현
ggplot(data=airquality, aes(x=Temp)) + geom_histogram(binwidth=0.5)
library(ggplot2)
library(dplyr)
# 8. 그래프를 강조하는 방법 2 막대그래프에서 활용
# 기어 갯수별 자동차 수를 표현
ggplot(data=mtcars, aes(x=gear)) + geom_bar() +
labs(x="기아수", y="자동차수", title="기어수별 자동차수")
##### 시각화 응용
# 7. 그래프를 강조하는 방법 1 - 도형, 화살표, 텍스트
# 자동차 무게(wt)에 따른 효율(mpg)를 산점도로 효율
ggplot(data=mtcars, aes(x=wt, y=mpg)) + geom_point() +
annotate("rect", xmin=3, xmax=4, ymin=12, ymax =21, fill="cyan", alpha = 0.5) +
annotate("segment", x=2.5, xend=3.7, y=10, yend=17, color="pink", arrow=arrow()) +
annotate("text", x=2.5, y=10, label="Important", color = "orange") +
annotate("text", x=3.8, y=18, label="granduer 2020", color = "red", size = 3)
##### 시각화 응용
# 7. 그래프를 강조하는 방법 1 - 도형, 화살표, 텍스트
# 자동차 무게(wt)에 따른 효율(mpg)를 산점도로 효율
ggplot(data=mtcars, aes(x=wt, y=mpg)) + geom_point() +
annotate("rect", xmin=3, xmax=4, ymin=12, ymax =21) +
annotate("segment", x=2.5, xend=3.7, y=10, yend=17, color="pink", arrow=arrow()) +
annotate("text", x=2.5, y=10, label="Important", color = "orange") +
annotate("text", x=3.8, y=18, label="granduer 2020", color = "red", size = 3)
