# 2. 세로 결합 - bind_rows() 함수 : 세로 결합시에 가장 많이 사용하는 함수
group1 <- data.frame(id = 1:5,
test = c(60,80,70,90,85), stringsAsFactors = F)
group2 <- data.frame(id = 6:10,
test = c(70, 83, 65, 95, 80), stringsAsFactors = F)
View(pg)
#데이터 결합 함수 - 다양한 결합 함수 사용
# 1. 세로 결합(조인)
a <- data.frame(A = c("a", "b", "c"),
B = c("t", "u", "v"),
C = c(1,2,3), stringsAsFactors = F)
b <- data.frame(A = c("a", "b", "c"),
B = c("t", "u", "w"),
C = c(1, 2, 4), stringsAsFactors = F)
# 1-1 . bind_rows() - 데이터 아래에 데이터2를 세로로 합침.
ab1 <- bind_rows(a, b)
View(ab1)
# 1-2 . insersect() - 데이터 1과 데이터2중에서 같은 데이터만 합침.
ab2 <- intersect(a, b)
View(ab2)
# 2. 가로 결합(조인)
A <- data.frame(id = c(1,2,3),
locale = c('서울','부산','대구'), stringsAsFactors = F)
B <- data.frame(id = c(1, 2, 4),
sex = c('남성', '여성', '남성'), stringsAsFactors = F)
# 2-2 right_join() - 오른쪽 데이터를 기준으로 왼쪽 데이터를 기준컬럼(변수)로 가로로 합침.
AB2 <- right_join(A, B, by="id")
AB2
# 문제) mpg에서 fl에 해당하는 연료의 가격을 갖는 price라는 파생변수를 생성하시오.
View(mpg)
table(mpg$fl)
# c : 2.35, d : 2.38, e: 2.11, p: 2.76, r: 2.22
mpg <- within(mpg, price <- ifelse(fl = 'c', 2.35,
ifelse(fl = 'd', 2.38,
ifelse(fl = 'e', 2.11,
ifelse(f1 = 'p', 2.76, 2.22)
)))))
# c : 2.35, d : 2.38, e: 2.11, p: 2.76, r: 2.22
mpg <- within(mpg, price <- ifelse(fl = 'c', 2.35,
ifelse(fl = 'd', 2.38,
ifelse(fl = 'e', 2.11,
ifelse(f1 = 'p', 2.76, 2.22)
))))
# c : 2.35, d : 2.38, e: 2.11, p: 2.76, r: 2.22
mpg <- within(mpg, price <- ifelse(fl = 'c', 2.35,
ifelse(fl = 'd', 2.38,
ifelse(fl = 'e', 2.11,
ifelse(f1 = 'p', 2.76, 2.22)
))))
# c : 2.35, d : 2.38, e: 2.11, p: 2.76, r: 2.22
mpg <- within(mpg, price <- ifelse(fl = 'c', 2.35,
ifelse(fl = 'd', 2.38,
ifelse(fl = 'e', 2.11,
ifelse(f1 = 'p', 2.76, 2.22)
))))
# c : 2.35, d : 2.38, e: 2.11, p: 2.76, r: 2.22
mpg <- within(mpg, price <- ifelse(fl = c, 2.35,
ifelse(fl = d, 2.38,
ifelse(fl = e, 2.11,
ifelse(f1 = p, 2.76, 2.22)
))))
# c : 2.35, d : 2.38, e: 2.11, p: 2.76, r: 2.22
mpg <- within(mpg, price <- ifelse(fl = 'c', 2.35,
ifelse(fl = 'd', 2.38,
ifelse(fl = 'e', 2.11,
ifelse(f1 = 'p', 2.76, 2.22)
))))
# c : 2.35, d : 2.38, e: 2.11, p: 2.76, r: 2.22
mpg <- within(mpg, price <- ifelse(fl = 'c', 2.35,
ifelse(fl = 'd', 2.38,
ifelse(fl = 'e', 2.11,
ifelse(f1 = 'p', 2.76, 2.22)
)))
)
# c : 2.35, d : 2.38, e: 2.11, p: 2.76, r: 2.22
mpg <- within(mpg, price <- ifelse(fl = 'c', 2.35,
ifelse(fl = 'd', 2.38,
ifelse(fl = 'e', 2.11,
ifelse(f1 = 'p', 2.76, 2.22)
))))
# c : 2.35, d : 2.38, e: 2.11, p: 2.76, r: 2.22
mpg <- within(mpg, price <- ifelse(fl = 'c', 2.35,
ifelse(fl = 'd', 2.38,
ifelse(fl = 'e', 2.11,
ifelse(f1 = 'p', 2.76, 2.22)
))))
# c : 2.35, d : 2.38, e: 2.11, p: 2.76, r: 2.22
mpg <- within(mpg, price <- ifelse(fl == 'c', 2.35,
ifelse(fl =='d', 2.38,
ifelse(fl == 'e', 2.11,
ifelse(f1 == 'p', 2.76, 2.22)
))))
# c : 2.35, d : 2.38, e: 2.11, p: 2.76, r: 2.22
mpg <- within(mpg, price <- ifelse(fl == 'c', 2.35,
ifelse(fl =='d', 2.38,
ifelse(fl == 'e', 2.11,
ifelse(fl == 'p', 2.76, 2.22)
))))
View(mpg)
View(fuel)
# 2번 방법(결합)
fuel <- data.frame(fl = c("c", "d", "e", "p", "r"),
price2 = c(2.35, 2.38, 2.11, 2.76, 2.22), stringsAsFactors = F)
View(fuel)
mpg <- left_join(mpg, fuel, by="fl")
View(mpg)
# 문제) age 변수에 나이를 입력받아 age가 70세 이상이면 "노년", 40세 이상이면 "중년", 20세 이상이면 "청년", 20세 미만이면 "소년"이라는 결과를 출력하는 프로그램을 작성하시오.
age <- scan(what="")
print(ifelse(age >= 70, "노년",
ifelse(age >= 40, "중년",
ifelse(age >= 20, "청년", "소년")
)))
# 문제) age 변수에 나이를 입력받아 age가 70세 이상이면 "노년", 40세 이상이면 "중년", 20세 이상이면 "청년", 20세 미만이면 "소년"이라는 결과를 출력하는 프로그램을 작성하시오.
age <- scan(what="")
print(age)
# 문제) age 변수에 나이를 입력받아 age가 70세 이상이면 "노년", 40세 이상이면 "중년", 20세 이상이면 "청년", 20세 미만이면 "소년"이라는 결과를 출력하는 프로그램을 작성하시오.
age <- scan(what=)
print(age)
print(ifelse(age >= 70, "노년",
ifelse(age >= 40, "중년",
ifelse(age >= 20, "청년", "소년")
)))
# 사용자 정의 함수 생성
# 함수
fn_score <- function(x) {
age <- scan(what=)
print(ifelse(age >= 70, "노년",
ifelse(age >= 40, "중년",
ifelse(age >= 20, "청년", "소년")
)))
}
fn_score(60)
print(ifelse(age >= 70, "노년",
ifelse(age >= 40, "중년",
ifelse(age >= 20, "청년", "소년")
)))
fn_score(60)
# 사용자 정의 함수 생성
# 함수
fn_score <- function(age) {
print(ifelse(age >= 70, "노년",
ifelse(age >= 40, "중년",
ifelse(age >= 20, "청년", "소년")
)))
}
fn_score(60)
# 반복문
# for, while, repeat
# 2-1 for문
s <- 0
for(i in 1:10) {
s <- s + i
}
s
s <- s + 1
s
while(i <= 10) {
s <- s + i
i <- i + 1
}
s
# 2-2 while문
s <- 0
i <- 1
while(i <= 10) {
s <- s + i
i <- i + 1
}
s
repeat {
s <- s + i
i <- i + 1
if (i > 10){
break
}
}
s
# 2-3 repeat문 - 조건 반복이 아닌 무한 반복
# break 문이랑 사용
s <- 0
i <- 1
repeat {
s <- s + i
i <- i + 1
if (i > 10){
break
}
}
s
break
## 반복문(for문) 연습
# 1. 1부터 100까지 출력
s <- 0
repeat{
s++
print(s)
if(s > 100){
break
}
}
## 반복문(for문) 연습
# 1. 1부터 100까지 출력
s <- 0
repeat{
s <- s + 1
print(s)
if(s > 100){
break
}
}
## 반복문(for문) 연습
# 1. 1부터 100까지 출력
s <- 0
repeat{
s <- s + 1
print(s)
if(s >= 100){
break
}
}
# 2. 문자 벡터를 값들을 차례대로 출력
str <- c('고하늘', '박성순', '배명수', '백승수', '김사부')
for (i in str) {
print(i)
}
# 3. 1부터 100까지의 정수 중에서 홀수를 출력
for (i in 1:100){
if (i / 2 != 0){
print(i)
}
}
# 3. 1부터 100까지의 정수 중에서 홀수를 출력
for (i in 1:100){
if (i / 2 !== 0){
print(i)
}
}
# 3. 1부터 100까지의 정수 중에서 홀수를 출력
for (i in 1:100){
if (i / 2 != 0){
print(i)
}
}
# 3. 1부터 100까지의 정수 중에서 홀수를 출력
for (i in 1:100){
if (i % 2 != 0){
print(i)
}
}
# 3. 1부터 100까지의 정수 중에서 홀수를 출력
x <- 1 : 100
for (i in x){
if (i / 2 != 0){
print(i)
}
}
# 3. 1부터 100까지의 정수 중에서 홀수를 출력
for (i in 1:100){
if (i / 2 != 0){
print(i)
}else{
}
}
# 3. 1부터 100까지의 정수 중에서 홀수를 출력
for (i in 1:100){
if (i %% 2 != 0){
print(i)
}
}
print(i)
# 4. 1부터 100까지의 정수 중에서 3의 배수이면서 4의 배수인 수를 출력
for (i in 1:100){
if (i %% 3 == 0 && i %% 4 == 0){
print(i)
}
}
# 4. 1부터 100까지의 정수 중에서 3의 배수이면서 4의 배수인 수를 출력
for (i in 1:100){
if (i %% 3 == 0 & i %% 4 == 0){
print(i)
}
}
print(i)
# 5. 1부터 100까지의 정수중에서 5의 배수거나 7의 배수인 수를 출력
for (i in 1:100){
if (i %% 5 == 0 || i %% 7 == 0){
print(i)
}
}
# 6. 1부터 10까지의 정수중에서 7이 되었을 때 반복문을 탈출
for (i in 1:10){
if (i == 7){
break
}
}
# 6. 1부터 10까지의 정수중에서 7이 되었을 때 반복문을 탈출
for (i in 1:10){
if (i == 7){
print(i)
break
}
}
source('~/.active-rstudio-document', echo=TRUE)
# 7. 1부터 10까지의 정수중에서 5를 제외한 값을 출력
for(i in 1:10){
if (i == 5){
continue
}
print(i)
}
# 7. 1부터 10까지의 정수중에서 5를 제외한 값을 출력
for(i in 1:10){
if (i == 5){
pass
}
print(i)
}
# 7. 1부터 10까지의 정수중에서 5를 제외한 값을 출력
for(i in 1:10){
if (i == 5){
next
}
print(i)
}
### 2. 사용자 함수 정의 - 반복문을 활용
# 문제) 1부터 n까지를 출력하는 함수를 생성하고, 활용
fn_loop <- function(x){
for (i in 1:x){
print(i)
}
}
fn_loop(10)
library(readxl)
library(ggplot2)
library(dplyr)
midwest <- as.data.frame(ggplot2::midwest)
View(midwest)
midwest <- rename(midwest, total <- poptotal, asian <- popasian)
View(midwest)
View(midwest)
midwest <- rename(midwest, poptotal <- total, popasian <- asian)
View(midwest)
midwest <- rename(midwest, poptotal = total, popasian = asian)
midwest <- rename(midwest, total = poptotal, asian = popasian)
View(midwest)
# 2. total, asian 변수를 이용하여 '전체 인구 대비 아시아 인구의 백분율'을 나타내는 파생변수 ratio를 생성하시오.
midwest <- within(midwest, ratio <- total/asian)
View(midwest)
# 3. 아시아 인구 백분율 전체 평균을 구하는 파생변수 average를 만들고, 이 평균을 초과하면 'large', 그 외에는 'small'이라는 값을 대입하는 파생변수 group을 생성하시오.
midwest$average <- mean(midwest$ratio)
View(midwest)
# 3. 아시아 인구 백분율 전체 평균을 구하는 파생변수 average를 만들고, 이 평균을 초과하면 'large', 그 외에는 'small'이라는 값을 대입하는 파생변수 group을 생성하시오.
midwest$average <- mean(midwest$ratio)
View(midwest)
midwest$group <- ifelse(midwest$ratio > midwest$average, 'large', 'small')
View(midwest)
# 3. 아시아 인구 백분율 전체 평균을 구하는 파생변수 average를 만들고, 이 평균을 초과하면 'large', 그 외에는 'small'이라는 값을 대입하는 파생변수 group을 생성하시오.
midwest$average <- mean(midwest$ratio)
# 2. total, asian 변수를 이용하여 '전체 인구 대비 아시아 인구의 백분율'을 나타내는 파생변수 ratio를 생성하시오.
midwest <- within(midwest, ratio <- asian/total*100)
View(midwest)
# 3. 아시아 인구 백분율 전체 평균을 구하는 파생변수 average를 만들고, 이 평균을 초과하면 'large', 그 외에는 'small'이라는 값을 대입하는 파생변수 group을 생성하시오.
midwest$average <- mean(midwest$ratio)
View(midwest)
midwest$group <- ifelse(midwest$ratio > midwest$average, 'large', 'small')
View(midwest)
# 4. 'large'와 'small'에 해당하는 지역이 얼마나 되는지 빈도표와 빈도 막대 그래프를 그리시오.
table(midwest$group)
qplot(midwest$group)
# 데이터 가공
exam <- read_excel("../../data1/excel_exam.xlsx")
View(exam)
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
exam %>% filter(class == 3)
exam
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
exam %>% filter(class == 3)
exam %>% filter(math >= 70)
exam %>% filter(class != 1)
exam_ClassOneThreeFive <- exam %>% filter(class == 1 | class == 3 | class = 5)
exam_ClassOneThreeFive <- exam %>% filter(class == 1 | class == 3 | class == 5)
exam_ClassOneThreeFive2 <- exam %>% filter(class %in% c(1,3,5))
exam_GeniusAtMath <- exam %>% filter(math >= 60 & science >= 70)
exam_GeniusAtMathAndScience <- exam %>% filter(math >= 60 & science >= 70)
# 1. filter()함수 - 조건에 따른 행(데이터, 레코드)를 추출 (dplyr패키지 안에 있음)
# %>% - 디플라이어 패키지에서 사용하는 연산자, 파이프 연산자, 체인 연산자
# %in# - 매칭 연산자
exam_ClassThree <- exam %>% filter(class == 3)
exam_GeniusAtMath <- exam %>% filter(math >= 70)
exam_ClassNotOne <- exam %>% filter(class != 1)
exam_ClassOneThreeFive <- exam %>% filter(class == 1 | class == 3 | class == 5)
exam_ClassOneThreeFive2 <- exam %>% filter(class %in% c(1,3,5))
exam_GeniusAtMathAndScience <- exam %>% filter(math >= 60 & science >= 70)
# 문제 1) 1반과 2반의 학생 정보를 확인할 수 있는 class12 라는 데이터프레임을 생성하시오.
class12 <- exam %>% filter(class == 1 | class == 2)
class12
# 문제 2) 수학, 영어, 과학 점수가 모두 60점 이상인 학생의 정보
classGenius <- exam %>% filter(math >= 60 & english >= 60 & science >= 60)
classGenius
# 문제1) 자동차 배기량(displ)에 따라 고속도로 연비가 다른지 확인하고자 할 때, 배기량이 4이하인 자동차와 배기량이 5이상인 자동차 중에서 어떤 자동차의 고속도로 연비(hwy)가 평균적으로 더 높은지 확인하시오.
View(mpg)
# 문제1) 자동차 배기량(displ)에 따라 고속도로 연비가 다른지 확인하고자 할 때, 배기량이 4이하인 자동차와 배기량이 5이상인 자동차 중에서 어떤 자동차의 고속도로 연비(hwy)가 평균적으로 더 높은지 확인하시오.
exam_lowDispl <- mpg %>% filter(displ <= 4)
exam_lowDispl
exam_highDispl <- mpg %>% filter(displ >= 5)
exam_highDispl
View(exam_lowDispl)
# 문제1) 자동차 배기량(displ)에 따라 고속도로 연비가 다른지 확인하고자 할 때, 배기량이 4이하인 자동차와 배기량이 5이상인 자동차 중에서 어떤 자동차의 고속도로 연비(hwy)가 평균적으로 더 높은지 확인하시오.
exam_lowDispl <- mpg %>% filter(displ <= 4)
View(exam_lowDispl)
exam_highDispl <- mpg %>% filter(displ >= 5)
exam_highDispl
View(exam_highDispl)
# 문제1) 자동차 배기량(displ)에 따라 고속도로 연비가 다른지 확인하고자 할 때, 배기량이 4이하인 자동차와 배기량이 5이상인 자동차 중에서 어떤 자동차의 고속도로 연비(hwy)가 평균적으로 더 높은지 확인하시오.
exam_lowDispl <- mpg %>% filter(displ <= 4)
mpg <- as.data.frame(ggplot2::mpg)
# 문제1) 자동차 배기량(displ)에 따라 고속도로 연비가 다른지 확인하고자 할 때, 배기량이 4이하인 자동차와 배기량이 5이상인 자동차 중에서 어떤 자동차의 고속도로 연비(hwy)가 평균적으로 더 높은지 확인하시오.
exam_lowDispl <- mpg %>% filter(displ <= 4)
View(exam_lowDispl)
exam_highDispl <- mpg %>% filter(displ >= 5)
View(exam_highDispl)
# 문제1) 자동차 배기량(displ)에 따라 고속도로 연비가 다른지 확인하고자 할 때, 배기량이 4이하인 자동차와 배기량이 5이상인 자동차 중에서 어떤 자동차의 고속도로 연비(hwy)가 평균적으로 더 높은지 확인하시오.
exam_lowDispl <- mpg %>% filter(displ <= 4)
View(exam_lowDispl)
View(exam_highDispl)
# 문제2) 자동차 제조회사에 따라 도시연비가 다른지 확인하고자 할 때, "audi"와 "toyota"중에서 어느 자동차 제조회사의 도시연비가 평균적으로 더 높은지 확인하시오.
exam_audi <- mpg %>% filter(manufacturer == 'audi')
View(exam_audi)
exam_toyota <- mpg %>% filter(manufacturer = 'toyota')
exam_toyota <- mpg %>% filter(manufacturer == 'toyota')
View(exam_toyota)
View(exam_audi)
View(exam_audi)
mean(exam_audi$cty)
if(mean(exam_audi$cty) > mean(exam_toyota$cty)){
print("아우디의 도시연비가 더 높다")
}else{
print("토요타의 도시연비가 더 높다")
}
if(mean(exam_lowDispl$hwy) > mean(exam_highDispl$hwy)){
print("배기량이 4이하인 자동차의 고속도로 연비가 더 높다")
}else{
print("배기량이 5이상인 자동차의 고속도로 연비가 더 높다")
}
# 문제3) "chevrolet", "ford", "honda" 3개 제조회사의 자동차의 고속도로 연비의 평균을 확인하고자 할 때 , 이 회사의 데이터를 추출하여 저장한 후 , 고속도로연비의 전체 평균을 구하시오.
exam_chevrolet <- mpg %>% filter(manufacturer == 'chevrolet')
View(exam_chevrolet)
exam_ford <- mpg %>% filter(manufacturer == 'ford')
View(exam_ford)
exam_honda <- mpg %>% filter(manufacturer == 'honda')
View(exam_honda)
exam_averageHwy <- mean(exam_chevrolet$hwy, exam_ford$hwy, exam_honda$hwy)
exam_averageHwy <- mean(mean(exam_chevrolet$hwy), mean(exam_ford$hwy), mean(exam_honda$hwy))
View(exam_averageHwy)
print(exam_averageHwy)
View(exam_lowDispl)
if(mean(exam_lowDispl$hwy) > mean(exam_highDispl$hwy)){
print("배기량이 4이하인 자동차의 고속도로 연비가 더 높다")
}else{
print("배기량이 5이상인 자동차의 고속도로 연비가 더 높다")
}
# select() 함수 - 구하고자 하는 열(변수) 추출
exam %>% select(math, science)
exam %>% select(class, english, science)
exam %>% select(!id, !english)
exam %>% select(-id, -english)
exam %>%  select(-english),filter(class == 1 | class ==2)
exam %>%  select(-english) %>% filter(class == 1 | class ==2)
exam %>% filter(class %in% c(1,2,3)) %>% select(filter(math >= 60 & science >= 60))
exam %>% filter(class %in% c(1,2,3)) %>% select(math >= 60 & science >= 60)
# select() 함수 - 구하고자 하는 열(변수) 추출
exam %>% select(math, science)
exam %>% select(class, english, science)
exam %>% select(-id, -english)
exam %>%  select(-english) %>% filter(class == 1 | class ==2)
exam %>% filter(class %in% c(1,2,3)) %>% select(math >= 60 & science >= 60)
rlang:last_error()
last_error()
rlang::last_error()
exam %>% filter(class %in% c(1,2,3) & math >= 60 & science >= 60) %>% select(class, math, science)
### arrange() 함수 - 행을 정렬하는 함수(오름차순, 내림차순)
exam %>% arrange(english)
### arrange() 함수 - 행을 정렬하는 함수(오름차순, 내림차순)
exam %>% arrange(desc(english))
### arrange() 함수 - 행을 정렬하는 함수(오름차순, 내림차순)
exam %>% arrange(desc(english)) %>% head(5)
%>% head(5)
### arrange() 함수 - 행을 정렬하는 함수(오름차순, 내림차순)
exam %>% arrange(desc(english))
### arrange() 함수 - 행을 정렬하는 함수(오름차순, 내림차순)
exam %>% arrange(desc(english)) %>%
head(5)
# 문제) 3반이 아니며 수학,과학 점수가 60점이상인 학생 중 영어 점수를 제외하고, 수학점수를 기준으로 내림차순 정렬하고, 수학점수가 같다면 과학점수를 기준으로 내림차순 정렬하라.
exam %>% filter(class != 3 & math >= 60 & science >= 60) %>%
select(-english) %>%
arrange(math) %>%
arrange(science)
# 문제) 3반이 아니며 수학,과학 점수가 60점이상인 학생 중 영어 점수를 제외하고, 수학점수를 기준으로 내림차순 정렬하고, 수학점수가 같다면 과학점수를 기준으로 내림차순 정렬하라.
exam %>% filter(class != 3 & math >= 60 & science >= 60) %>%
select(-english) %>%
arrange(science) %>%
arrange(math)
# 문제) 3반이 아니며 수학,과학 점수가 60점이상인 학생 중 영어 점수를 제외하고, 수학점수를 기준으로 내림차순 정렬하고, 수학점수가 같다면 과학점수를 기준으로 내림차순 정렬하라.
exam %>% filter(class != 3 & math >= 60 & science >= 60) %>%
select(-english) %>%
arrange(math, science)
# 문제) 3반이 아니며 수학,과학 점수가 60점이상인 학생 중 영어 점수를 제외하고, 수학점수를 기준으로 내림차순 정렬하고, 수학점수가 같다면 과학점수를 기준으로 내림차순 정렬하라.
exam %>% filter(class != 3 & math >= 60 & science >= 60) %>%
select(-english) %>%
arrange(-math, -science)
